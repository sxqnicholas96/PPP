{"version":3,"sources":["components/aboutme.js","components/contact.js","components/landingPage/landingPage.js","components/resume.js","components/projects.js","components/main.js","App.js","serviceWorker.js","index.js","images/avatar.png"],"names":["AboutMe","react_default","a","createElement","Component","Contact","LandingPage","style","width","margin","lib","className","col","src","Avatar","alt","href","rel","target","class","aria-hidden","Resume","Projects","Main","react_router","exact","path","component","App","react_router_dom","to","title","main","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bea05559.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AboutMe extends Component {\n  render() {\n    return (\n      <div>\n        <h1>About Me</h1>\n      </div>\n    );\n  }\n}\n\nexport default AboutMe;\n","import React, { Component } from \"react\";\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Contact</h1>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport { Grid, Cell } from \"react-mdl\";\n\nimport \"./landingPage.css\";\nimport Avatar from \"../../images/avatar.png\";\n\nclass LandingPage extends Component {\n  render() {\n    return (\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Grid className=\"landing_grid\">\n          <Cell col={12}>\n            <img src={Avatar} alt=\"Avatar\" />\n            <div className=\"banner_text\">\n              <h1> Software Developer</h1>\n              <hr />\n\n              <p>\n                HTML/CSS | React | ReactNative | JavaScript| Java | NodeJS |\n                Express\n              </p>\n            </div>\n\n            <div className=\"social_links\">\n              {/*LinkedIn*/}\n              <a\n                href=\"https://www.linkedin.com/in/sxqnicholas96/\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <i class=\"fab fa-linkedin\" aria-hidden=\"true\" />\n              </a>\n              {/*GitHub*/}\n              <a\n                href=\"https://github.com/sxqnicholas96\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <i class=\"fab fa-github-square\" aria-hidden=\"true\" />\n              </a>\n            </div>\n          </Cell>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from \"react\";\n\nclass Resume extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Resume</h1>\n      </div>\n    );\n  }\n}\n\nexport default Resume;\n","import React, { Component } from \"react\";\n\nclass Projects extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Projects</h1>\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport AboutMe from \"./aboutme\";\nimport Contact from \"./contact\";\nimport LandingPage from \"./landingPage/landingPage\";\nimport Resume from \"./resume\";\nimport Projects from \"./projects\";\n\nconst Main = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={LandingPage} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/resume\" component={Resume} />\n      <Route path=\"/aboutme\" component={AboutMe} />\n      <Route path=\"/projects\" component={Projects} />\n    </Switch>\n  );\n};\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport { Layout, Navigation, Drawer, Content, Header } from \"react-mdl\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Main from \"./components/main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <Header className=\"header_color\">\n            <Navigation>\n              <Link to=\"/\">Home</Link>\n              <Link to=\"/aboutme\">About Me</Link>\n              <Link to=\"/contact\">Contact</Link>\n              <Link to=\"/resume\">Resume</Link>\n              <Link to=\"/projects\">Projects</Link>\n            </Navigation>\n          </Header>\n          <Drawer title=\"Navigation\">\n            <Navigation>\n              <Link to=\"/\">Home</Link>\n\n              <Link to=\"/aboutme\">About Me</Link>\n              <Link to=\"/contact\">Contact</Link>\n              <Link to=\"/resume\">Resume</Link>\n              <Link to=\"/projects\">Projects</Link>\n            </Navigation>\n          </Drawer>\n\n          <Content>\n            <Main />\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.7b9b31bc.png\";"],"sourceRoot":""}